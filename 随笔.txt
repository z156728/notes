█js转换日期格式方法
Date.prototype.format = function(fmt) { 
     var o = { 
        "M+" : this.getMonth()+1,                 //月份 
        "d+" : this.getDate(),                    //日 
        "h+" : this.getHours(),                   //小时 
        "m+" : this.getMinutes(),                 //分 
        "s+" : this.getSeconds(),                 //秒 
        "q+" : Math.floor((this.getMonth()+3)/3), //季度 
        "S"  : this.getMilliseconds()             //毫秒 
    }; 
    if(/(y+)/.test(fmt)) {
            fmt=fmt.replace(RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length)); 
    }
     for(var k in o) {
        if(new RegExp("("+ k +")").test(fmt)){
             fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));
         }
     }
    return fmt; 
}
调用一:  var time1 = new Date().format("yyyy-MM-dd hh:mm:ss");	   
	 console.log(time1);	//输出结果 2014-06-08 12:35:48
调用二:  var time2 = new Date().format("yyyy-MM-dd");	  --------------版本二：var time1 = eval('new '+ jss[i].data.substr(1,jss[i].data.length-2)).format("yyyy-MM-dd");
	 console.log(time2);	//输出结果 2018-05-12

  ▅将指定的日期转换成年月日的格式
	 var oldTime = (new Date("2012/12/25 20:11:11")).getTime();
   	 var curTime = new Date(oldTime).format("yyyy-MM-dd");
   	 console.log(curTime);	 //输出结果 2012-05-17
  ▅将时间戳转换为年月日格式
	 var da = 1402233166999;
    	 da = new Date(da);
    	 var year = da.getFullYear()+'年';
   	 var month = da.getMonth()+1+'月';
   	 var date = da.getDate()+'日';
   	 console.log([year,month,date].join('-'));		//输出结果  2014年-6月-15日
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
█原生js的ajax方法
	<script>
	    btn.onclick=function(){

   	    var xhr=new XMLHttpRequest();        //创建xhr对象--隶属XML

	    xhr.onreadystatechange=function(){  //事件监听请求执行到哪一步

  	    if(xhr.readyState===4){

            if(xhr.status===200){

  	    var header=xhr.getAllResponseHeaders();  //获得所有响应头

  	    doResponse(xhr); //响应成功调用处理响应数据函数

      	     }else{

             alert("响应异常");  //响应失败

       	     }

           }
	};

	xhr.open("get","1.php",true); 	//第一个参数请求方法（get/post）,要请求页面的地址(url),第三个参数设置是否异步,(true/false)

	xhr.setRequestHeader("Content-Type","multipart/form-data/");	//设置请求头，需要就设置，不需要可没有

	xhr.send(null);   	//参数为要传递的数据，可键值对的形式key=value，也可以是对象的形式｛key:value｝，没有则nul

	function doResponse(xhr){

    	 console.log(xhr);	//从xhr对象中获取响应数据，在这做相应处理

    	}
     }
   </script>

  ▅jQuery的ajax方法
	   $.ajax({ 
     		type : "get", 	//提交方式 
     		url : "",	//路径 
		async：true，	//默认值为true，所有请求是异步，要求是Bool类型的参数，如果需要发送同步请求，将此项设置为false
		dataType：JSON/JSONP，//返回JSON数据/JSONP格式。使用SONP形式调用函数时，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数
     		data : { },	//传输到后台接口的数据，这里使用的是Json格式进行传输 
     		success : function(result) { }，//返回数据根据结果进行相应的处理    	     
		error：function（result）{ } 
    	    });

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
█JS的--字符串--分割和截取
     ▅substring()	
	substring(start,end)表示从start到end之间的字符串
	例：var src="images/off_1.png";
	  console.log(src.substring(7,10));	//弹出值为：off
     ▅substr()
	substr(start,length)表示从start位置开始，截取length长度的字符串。
	例：var src="images/off_1.png";
	  alert(src.substr(7,3));		//弹出值为：off  
     ▅split()
	使用一个指定的分隔符把一个字符串分割存储到数组
	例：str="jpg|bmp|gif|ico|png";
	    arr=theString.split("|");		//arr输出是一个包含字符值"jpg"、"bmp"、"gif"、"ico"和"png"的数组
     ▅Join()
	使用您选择的分隔符将一个数组合并为一个字符串
	例：var delimitedString=myArray.join(delimiter);
	    var myList=new Array("jpg","bmp","gif","ico","png");
	    var portableList=myList.join("|");	//输出结果是jpg|bmp|gif|ico|png
     ▅indexOf()
	返回字符串中匹配子串的第一个字符的下标
	例：var myString="JavaScript";
	    var w=myString.indexOf("v");	//w输出console.log（2）；
	    var x=myString.indexOf("S");x will be 4	//x输出console.log（4）；
	    var y=myString.indexOf("Script");y will also be 4	//y输出console.log（4）；
	    var z=myString.indexOf("key");z will be -1 		//z输出console.log（-1）；
     ▅lastIndexOf()---------？？？？？？？？？？？？
	lastIndexOf()方法返回从右向左出现某个字符或字符串的首个字符索引值（与indexOf相反）	返回字符串索引值
	例：var src="images/off_1.png";
	    alert(src.lastIndexOf('/'));	//弹出值为6
	    alert(src.lastIndexOf('g'));	//弹出值为15
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
█js数组方法
   ▅创建数组方式：
    一：var arr1 = new Array(); //创建一个空数组
        var arr2 = new Array(20); // 创建一个包含20项的数组
        var arr3 = new Array("lily","lucy","Tom"); // 创建一个包含3个字符串的数组
    二：var arr4 = []; //创建一个空数组
	var arr5 = [20]; // 创建一个包含1项的数组
	var arr6 = ["lily","lucy","Tom"]; // 创建一个包含3个字符串的数组
   ▄join()
	将数组的元素组起一个字符串，以某元素为分隔符，省略的话则用默认用逗号为分隔符，该方法只接收一个参数：即分隔符
	例：var arr = [1,2,3];
	    console.log(arr.join()); // 1,2,3
	    console.log(arr.join("-")); // 1-2-3
   ▄push()和pop()
	push(): 可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。 
	pop()：数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项。
	例：var arr = ["Lily","lucy","Tom"];
	    var count = arr.push("Jack","Sean");
	    console.log(count); // 5
	    console.log(arr); // ["Lily", "lucy", "Tom", "Jack", "Sean"]
	    var item = arr.pop();
	    console.log(item); // Sean
	    console.log(arr); // ["Lily", "lucy", "Tom", "Jack"]
   ▄sort()
	按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。

   ▄concat()	
	将参数添加到原数组中。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只		是复制当前数组并返回副本。
	例：var arr = [1,3,5,7];
	    var arrCopy = arr.concat(9,[11,13]);
	    console.log(arrCopy); //[1, 3, 5, 7, 9, 11, 13]
	    console.log(arr); // [1, 3, 5, 7](原数组未被修改)
   ▄indexOf()和 lastIndexOf()
	indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。 
	lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找。
	例：var arr = [1,3,5,7,7,5,3,1];
	    console.log(arr.indexOf(5)); //2
	    console.log(arr.lastIndexOf(5)); //5
	    console.log(arr.indexOf(5,2)); //2
	    console.log(arr.lastIndexOf(5,4)); //2
	    console.log(arr.indexOf("5")); //-1
   ▄forEach()
	对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：遍历的数组内容；第对应的数组索引，数组本身。
	例：var arr = [1, 2, 3, 4, 5];
	    arr.forEach(function(x, index, a){
	    	console.log(x + '|' + index + '|' + (a === arr));
	    });
		// 输出为：
		// 1|0|true
		// 2|1|true
		// 3|2|true
		// 4|3|true
		// 5|4|true
   ▄filter()
	过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。
	例：var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	    	var arr2 = arr.filter(function(x, index) {
		return index % 3 === 0 || x >= 8;
	    }); 
	    console.log(arr2); //[1, 4, 7, 8, 9, 10]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
█for in  和 for of 的区别联系
   ▄大方向，for in适合遍历对象，及相关键名 也可以遍历数组,在未同化es6的情况下，推荐多用 in  例：let arr = {name:'张三' , age:'15' , id:'1'};
   
   ▄大方向，for of不支持遍历普通对象，多用于遍历数组,数组对象,map/set操作的数据,字符串，但是es6语法，在没进行转换前，尽量酌情使用
   	


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
█当元素使用transform: translate(-50% , -50%);居中方式时，如果元素尺寸是单数，会导致元素模糊，，，，


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
█使用flex布局时，justify-content 多行时，最后一行效果不对，可用解决办法
	1. 在列表结尾增加一系列空值：并设置 li:empty {height: 0; border: none;}  (空元素个数要比一行总数量少一个)
	2. 给父容器添加after伪元素  设置 .container:after {content: "";flex: auto;}  （有轻微局限性）


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
█三目运算符
	let a = a > 20 ?"赋值一" ： a < 10 ?"赋值二" ： a = 10 ?"赋值三"
	
	let b = b/20 == 0?"条件一" ：b/30 == 0?"条件二" ："条件三"
	
	let a = {a > 20 ?"赋值一" } ： {a < 10 ?"赋值二" } ： {a = 10 ?"赋值三"}   (花括号内为三种判断条件)
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
█比较运算符
	&& 比较符  如果前后数据，前为true  则输出值为后面数值
	           如果前后数据，前为false  则输出值为前面数值
	
	|| 比较符  如果前后数据，前为true  则输出值为前面数值
	           如果前后数据，前为false  则输出值为后面数值
